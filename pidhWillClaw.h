
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// PID using optical shaft encoder
//
// Shaft encoder has 360 pulses per revolution
//

#define PID_SENSOR_INDEX    QuadArm
#define PID_SENSOR_SCALE    1





#define PID_INTEGRAL_LIMIT  50

// These could be constants but leaving
// as variables allows them to be modified in the debugger "live"
float  pid_Kp = 0.5;
float  pid_Ki = 0.5;
float  pid_Kd = 2;
int offset=0;
float pidIntegrala;
 int   pidRunning = 0;
 float pidRequestedValue;
int PID_DRIVE_MAXA =127;
int PID_DRIVE_MINA =-127;
/*-----------------------------------------------------------------------------*/
/*                                                                             */
/*  pid control task                                                           */
/*                                                                             */
/*-----------------------------------------------------------------------------*/
void PIDTUNE (float kp,float ki,float kd){
	pid_Kp = kp;
  pid_Ki = ki;
  pid_Kd = kd;
}
void PIDTUNEh (float kp,float ki,float kd, int holddefault){
	pid_Kp = kp;
  pid_Ki = ki;
  pid_Kd = kd;
  offset=holddefault;
}



task pidController()
{
    float  pidSensorCurrentValue;

    float  pidError;
    float  pidLastError;

    float  pidDerivative;
    float  pidDrive;

    // If we are using an encoder then clear it
 /*   if( SensorType[ PID_SENSOR_INDEX ] == sensorQuadEncoder )
        SensorValue[ PID_SENSOR_INDEX ] = 0;*/

    // Init the variables - thanks Glenn :)
    pidLastError  = 0;
    pidIntegrala   = 0;

    while( true )
        {
        // Is PID control active ?
        if( pidRunning )
            {
            // Read the sensor value and scale
            pidSensorCurrentValue = SensorValue[ PID_SENSOR_INDEX ] * PID_SENSOR_SCALE;

            // calculate error
            pidError = pidRequestedValue - pidSensorCurrentValue;

            // integral - if Ki is not 0
            if( pid_Ki != 0 )
                {
                // If we are inside controlable window then integrate the error
                if( abs(pidError) < PID_INTEGRAL_LIMIT ){
                    pidIntegrala = pidIntegrala + pidError;
                  }
                }
            else{
                pidIntegrala = 0;
							}
            // calculate the derivative
            pidDerivative = pidError - pidLastError;
            pidLastError  = pidError;

            // calculate drive
            pidDrive = (pid_Kp * pidError) + (pid_Ki * pidIntegrala) + (pid_Kd * pidDerivative)+offset;

            // limit drive
            if( pidDrive > PID_DRIVE_MAXA )
                pidDrive = PID_DRIVE_MAXA;
            if( pidDrive < PID_DRIVE_MINA )
                pidDrive = PID_DRIVE_MINA;

            // send to motor
           RunArm(pidDrive);

   					 writeDebugStream("sensors: %i %i %i %i", pidError, pidDrive, pidLastError);

            }
        else
            {
            // clear all
            pidError      = 0;
            pidLastError  = 0;
            pidIntegrala   = 0;
            pidDerivative = 0;
            RunArm(0);
            }

        // Run at 50Hz
        wait1Msec( 25 );
        }
}

/*-----------------------------------------------------------------------------*/
/*                                                                             */
/*  main task                                                                  */
/*                                                                             */
/*-----------------------------------------------------------------------------*/

/*task main()
{
    // send the motor off somewhere
    pidRequestedValue = 1000;

    // start the PID task
    StartTask( pidController );

    // use joystick to modify the requested position
    while( true )
        {
        // maximum change for pidRequestedValue will be 127/4*20, around 640 counts per second
        // free spinning motor is 100rmp so 1.67 rotations per second
        // 1.67 * 360 counts is 600

        pidRequestedValue = pidRequestedValue + (vexRT[ Ch2 ]/4);

        wait1Msec(50);
        }

}*/
